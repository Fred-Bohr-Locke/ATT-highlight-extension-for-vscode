{
	"name": "AT&T Assembly Language",
	"patterns": [
		{"include": "#functions"},
		{"include": "#function_disas"},
		{"include": "#endbr64"},
		{"include": "#MOV"},
		{"include": "#registers"},
		{"include": "#int_calculation"},
		{"include": "#int_calculation_logical"},
		{"include": "#int_calculation_bit"},
		{"include": "#keywords"},
		{"include": "#set_condition"},
		{"include": "#SET"},
		{"include": "#JMP"},
		{"include": "#CMOV"},
		{"include": "#PUSH"},
		{"include": "#POP"},
		{"include": "#CALL"},
		{"include": "#NOP"},
		{"include": "#strings"},
		{"include": "#comments"},
		{"include": "#numbers"}
	],
	"repository": {
		"functions": {
			"end": ":$",
			"patterns": [{
				"name": "entity.name.function.att",
				"match": "^[.]?[_a-zA-Z][_0-9a-zA-Z@. ]*"
			}]
		},
		"function_disas": {
			"begin": "<",
			"end": ">",
			"patterns": [
				{
					"name": "entity.name.function.att",
					"match": "[.]?[_a-zA-Z][_0-9a-zA-Z@.]*"
				},
				{
					"begin": "[+]",
					"name": "constant.numeric.integer.att",
					"match": "0x[0-9a-f]+"
				}
			]
		},
		"endbr64": {
			"patterns": [{
				"name": "keyword.core.att",
				"match": "endbr64"
			}]
		},
		"MOV": {
			"patterns": [{
				"name": "keyword.core.att",
				"match": "\\b(mov([blqw]?|absq?|[sz]b[lqw]|[sz]w[lq]|slq)|clt[oq]|cqto)\\b"
			}]
		},
		"registers": {
			"patterns": [{
				"name": "variable.att",
				"match": "%(([er]?([a-d]x|si|di|bp|sp))|(r(ip|[8-9][bdw]?|1[0-5][bdw]?))|(([a-d]|si|di|bp|sp)l)|fs)"
			}]
		},
		"int_calculation": {
			"patterns": [{
				"name": "keyword.core.att",
				"match": "\\b((lea|inc|dec|neg|add|sub|i?(mul|div))[blqw]?)\\b"
			}]
		},
		"int_calculation_logical": {
			"patterns": [{
				"name": "keyword.core.att",
				"match": "\\b(not|xor|or|and)[blqw]?\\b"
			}]
		},
		"int_calculation_bit": {
			"patterns": [{
				"name": "keyword.core.att",
				"match": "\\bs[ah][lr][blqw]?\\b"
			}]
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.control.att",
				"match": "\\bre(pz?|tq?)\\b"
			}]
		},
		"set_condition": {
			"patterns": [{
				"name": "keyword.control.conditional.att",
				"match": "\\b(cmp|test)[blqw]?\\b"
			}]
		},
		"SET": {
			"patterns": [{
				"name": "keyword.core.att",
				"match": "\\bsetn?([ez]|s|[gl]e?|[ab]e?)\\b"
			}]
		},
		"JMP": {
			"patterns": [{
				"name": "keyword.core.att",
				"match": "\\bj(mp|n?[ez]|n?s|n?[gl]e?|n?[ab]e?)[blqw]?\\b"
			}]
		},
		"CMOV": {
			"patterns": [{
				"name": "keyword.core.att",
				"match": "\\bcmovn?([ez]|s|[gl]e?|[ab]e?)\\b"
			}]
		},
		"PUSH": {
			"patterns": [{
				"name": "keyword.core.att",
				"match": "\\bpushq?\\b"
			}]
		},
		"POP": {
			"patterns": [{
				"name": "keyword.core.att",
				"match": "\\bpopq?\\b"
			}]
		},
		"CALL": {
			"patterns": [{
				"name": "keyword.core.att",
				"match": "\\bcallq?\\b"
			}]
		},
		"NOP": {
			"patterns": [{
				"name": "keyword.core.att",
				"match": "\\bnop[blwq]?\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.att",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.att",
					"match": "\\\\."
				}
			]
		},
		"comments": {
			"patterns": [{
				"name": "comment.line.att",
				"match": ";.*$"
			}]
		},
		"numbers": {
			"patterns": [{
				"name": "constant.numeric.integer.att",
				"match": "[$]?(-?(0x)?[0-9a-fA-F]{1,16})"
			}]
		}
	},
	"scopeName": "source.s"
}