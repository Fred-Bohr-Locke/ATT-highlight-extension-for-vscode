这是att.tmLanguage.json的注释
因为json文件不支持注释，所以只能单独写了

寄存器匹配的时候，如%r8d，只匹配%r8，这个问题我不会解决，临时把所有寄存器并到一起吧
目前不加区分应该不要紧，如果寄存器要上不同的颜色，或者未来要写判断语法的插件（不太可能），再修改吧
        {"include": "#registers_64"},
		{"include": "#registers_32"},
		{"include": "#registers_16"},
		{"include": "#registers_8"},
        "registers_64": {
			"patterns": [{
				"name": "variable.att",
				"match": "%r([a-d]x|si|di|bp|sp|[8-9]|1[0-5])"
			}]
		},
        "registers_32": {
			"patterns": [{
				"name": "variable.att",
				"match": "%(e[a-d]x|esi|edi|ebp|esp|r[8-9]d|r1[0-5]d)"
			}]
		},
        "registers_16": {
			"patterns": [{
				"name": "variable.att",
				"match": "%([a-d]x|si|di|bp|sp|r[8-9]w|r1[0-5]w)"
			}]
		},
        "registers_8": {
			"patterns": [{
				"name": "variable.att",
				"match": "%([a-d]l|sil|dil|bpl|spl|r[8-9]b|r1[0-5]b)"
			}]
		}

整数运算部分原来的颜色为keyword.operator.arithmetic，不过这个颜色是白的？？所以也用了MOV的颜色
以后还是改改颜色吧，不然全是蓝的

逻辑运算原色：keyword.operator.logical

位运算原色：keyword.operator.bitwise

SET原色：keyword.operator

JMP原色：entity.name.label

COMV原色：keyword.operator

改好了function的匹配方式~
Disassembly of section .plt.got:
但是这一整句都会被匹配到，这可能不太好

新添加了伪指令匹配
但是不知道要用什么颜色名

		"functions_call": {
			"name": "keyword.core.att",
			"begin": "\\bcall\t",
			"end": "\\b$",
			"patterns": [
				{
					"name": "entity.name.function.att",
					"match": "[_a-zA-Z][_0-9a-zA-Z@.]*"
				},
				{
					"name": "punctuation.accessor.att",
					"begin": "[*]",
					"include": "#registers"
				}
			]
		},
解决一个问题的同时会带来一万个问题
不解决了
call后函数名匹配的问题